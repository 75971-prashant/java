-------------------------------------------------------------------------
1) define your exception class by name "MyArithException"
(MyArithException.java)
define class "Calculator"   (Calculator.java)
In this class define a function,which will accept an int and return double of it.
e.g int caldouble(int)
This function will check an int which is passed to it
It will raise the  exception if 0 is passed or negative passed
in case of 0 caller of this method should get error message
"Zero not allowed" 
in case of negative caller of this method should get error message
"negative not allowed"
In case of positive value it should simply return the double value.
	[ this method shouldn't handle the exception]

Now define class "MyCalcApp" (MyCalcApp.java)
In this class you accept a number from user and pass that no. to
caldouble() method which is mentioned above.

-->
package assigment;
import java.util.Scanner;
class myEx extends Exception
{
	public myEx(String str) {
		super(str);
	}
}

class Calculator{
	public int Calculator(int num) throws myEx
	{
		if(num==0) {
			throw new myEx("Zero not allowed");
		}
		else if(num<0) {
			throw new myEx("negative not allowed");
		}
		else {
		return num*2;
		}
	}
	
}
public class MyArithException {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);int res=0;
		System.out.println("enter the no:");
		int a=sc.nextInt();
		try {
			Calculator c=new Calculator();
			res=c.Calculator(a);
		}
		catch(myEx m) {
			System.out.println(m);
		}
		System.out.println(res);
	}
}
-----------------------------------------------------------------------------------------------------------

2>
on the developer side create an exception:
	NumberNotDivisibleBySevenException
	as a checked exception

create necessary jar and documentation.

on client side
	public class MyMath class with d
		public void disp(int num)
this disp() method will check if the number passed is not divisible by 7 , it will raise or else it will simply display the number passed.
	[ this method shouldn't handle the exception]

	public class Demo
		main function 
		invoke "disp()" of "MyMath" class.//developer code

-->
public class myEx extends Exception
{
	public myEx(String str) {
		
		super(str);
	}

}
//cilent code
package Client10;
import Devpro_assigment4.*;
class mymath
{
	public void disp(int num) throws myEx
	{
		if(num%7!=0) {
			throw new myEx("number is not divide by 7");
		}
		else {
			System.out.println(num);
		}
	}
	
}
public class Demo {

	public static void main(String[] args) {
		try {
			mymath m=new mymath();
			m.disp(10);
		}
		catch(myEx e) {
			System.out.println(e);
		}
	}
	
}
---------------------------------------------------------------
3>define "MyException" as a checked exception.

define a class "Demo" with 
	public void show1(), public void show2() , public void show3() and main functions.

inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
	[ this method shouldn't handle the exception]

main() function should call "show1()" , 
show1() function should call "show2()",
show2() function should call "show3()"

show2() should not handle the exception but show1() should handle.

-->
package assigment;
import java.util.Scanner;

class MyException extends Exception
{
	public MyException(String str) {
		super(str);
	}
	
}

public class Demo1 {

	public void show1() 
	{
		try {
			show2();
		}
		catch(MyException e)
		{
			e.printStackTrace();
		}
	}
	public void show2() throws MyException
	{
		show3();
	}
    public void show3() throws MyException
    {
    	Scanner sc=new Scanner(System.in);
    	System.out.println("enter");
    	int a=sc.nextInt();
    	if(a>10) {
    		throw new MyException("number is greater than 10 ");
    	}
		
	}
   public static void main(String[] args) {
	   Demo1 d=new Demo1();
	    d.show1();
	    
	
}
}
----------------------------------------------------------------------------------------
4>
on the developer side create following checked exception:
	InvalidLengthException
create necessary jar file and documentation.

on client side

public class Authenticator
	with
a parameterized constructor which takes String as a password.
this class also will have "done()" method with "successful authentication" message.
Parameterized constructor should check the length of the password passed if it is less than 5 or more that 9 , it should raise "InvalidLengthException" 
	[ constructor shouldn't handle the exception]

create a class "Demo" with main
	inside main function create the object of "Authenticator" class and invoke "done()" method.

-->
//developer code
package Devpro_assigment5;

public class InvalidLengthException extends Exception
{
      public InvalidLengthException(String str) {
    	  super(str);
      }
}
//cilent code
package Client11;
import Devpro_assigment5.*;
class Authenticator {
	public Authenticator(String Password) throws InvalidLengthException
	{
		int pass=Integer.parseInt(Password);
		if((pass<5)||(pass>9))
		{
		  	throw new InvalidLengthException("password in between 5-9");
		}
		else {
			done();
		}
		
	}
	public void done() {
		System.out.println("successful authentication");
	}
}

public class Demo2 {

	public static void main(String[] args) {
		try {
		Authenticator ref=new Authenticator("1011111111");
		}
		catch(InvalidLengthException e) {
			System.out.println(e);
		}
		
		
	}
}
------------------------------------------------------------------------------------------------------
5) on the developer side 
create checked exception "ResourceNotAllocatedException"

create a class:

public class MyResource implements AutoCloseable
{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    void disp()
    {
    	System.out.println("successful");
    }
	@Override
	public void close()  {
		System.out.println("resource is closed");
		
	}
}

create necessary jar file and documentation

on the client side
public class Demo with main function

	inside main function, create object of "MyResource" and invoke "disp()" method.



-->
//developer code
package Devpro_assigment6;

public interface AutoCloseable {
 
	
	
	 void MyResource(int capacity)throws ResourceNotAllocatedException;
	 void disp();
	 void close();
}

package Devpro_assigment6;

public class MyResource implements AutoCloseable
{
       public void MyResource(int capacity)throws ResourceNotAllocatedException
       {
    	   if(capacity>100) {
    		   throw new ResourceNotAllocatedException("not sufficient space");
    	   }
    	   else {
    		   disp();
    		  
    	   }
       }
       public void disp()
       {
       	System.out.println("successful");
        close();
       }
       @Override
       public void close() {
    	   System.out.println("resource is closed");
       }
       
}

package Devpro_assigment6;
public class ResourceNotAllocatedException extends Exception
{
  public ResourceNotAllocatedException(String str) {
	  super(str);  
  }
}
//cilent code
package Client12;

import Devpro_assigment6.*;
import Devpro_assigment6.AutoCloseable;

public class Demo3 
{
	public static void main(String[] args) {
		
		try {
			AutoCloseable ref=new MyResource();
			ref.MyResource(101);
		}
		catch(ResourceNotAllocatedException e){
			System.out.println(e);
		}
	}
	
}
